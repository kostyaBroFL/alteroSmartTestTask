syntax = "proto3";

option go_package = ".;ms_persistence";

import "validator.proto";
import "google/protobuf/timestamp.proto";

// MsPersistence is the service that generates the date
// by simulating multiple devices.
service MsPersistence {
    // SaveData is the method for saving chunk of the device's data.
    rpc SaveData (SaveDataRequest) returns (SaveDataResponse);
    // GetData is the method for loading
    // any last chunks of the data of specific device.
    rpc GetData (GetDataRequest) returns (GetDataResponse);
}

// SaveDataRequest is the request message for SaveData method.
message SaveDataRequest {
    // DeviceData is the data received from device.
    DeviceData device_data = 1 [(validator.field) = {
        msg_exists: true
    }];
}

// SaveDataResponse is the response message for SaveData method.
message SaveDataResponse {}

// GetDataRequest is the request message for GetData method.
message GetDataRequest {
    // Limit is the how many last data chunks need to receive.
    int32 limit = 1;
    // DeviceId is the identifier of the device for which need to get data.
    DeviceId device_id = 2 [(validator.field) = {
        msg_exists: true
    }];
}

// GetDataResponse is the response message for GetData method.
message GetDataResponse {
    // DeviceData is the list of the requested data.
    repeated DeviceData device_data = 1;
}

// TODO[#2]: Bottom's data are duplicated in other service.

// DeviceData is the data that the device sends.
message DeviceData {
    // DeviceId is the unique identifier of specific device.
    DeviceId device_id = 1 [(validator.field) = {
        msg_exists: true
    }];
    // Data is the data generated by the device.
    double data = 2;
    // Timestamp is time of generating data.
    google.protobuf.Timestamp timestamp = 3 [(validator.field) = {
        msg_exists: true
    }];
}

// DeviceId is the message that store the unique identifier of specific device.
message DeviceId {
    // Name is the unique title of specific device.
    string name = 1 [(validator.field) = {
        string_not_empty: true
    }];
}
